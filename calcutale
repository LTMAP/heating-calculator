<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Калькулятор секций ТКС</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .calculator {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        label {
            font-weight: bold;
            margin-bottom: 5px;
        }

        select, input {
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #4CAF50;
        }

        .canvas-container {
            position: relative;
            border: 2px solid #333;
            background: white;
            margin-bottom: 20px;
            overflow: hidden;
        }

        #roomCanvas {
            display: block;
            background: #f9f9f9;
            cursor: crosshair;
        }

        .section-info {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255,255,255,0.9);
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .results {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .result-card {
            background: #e8f5e8;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #4CAF50;
        }

        .result-value {
            font-size: 24px;
            font-weight: bold;
            color: #2e7d32;
        }

        .result-label {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
        }

        .section {
            position: absolute;
            border: 2px solid #2196F3;
            background: rgba(33, 150, 243, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            color: #1976D2;
            transition: all 0.2s;
        }

        .section:hover {
            background: rgba(33, 150, 243, 0.2);
            z-index: 10;
        }

        .dimensions-input {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        @media (max-width: 768px) {
            .controls {
                grid-template-columns: 1fr;
            }
            
            .dimensions-input {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="calculator">
        <h1>Калькулятор секций ТКС</h1>
        
        <div class="controls">
            <div class="control-group">
                <label for="sectionSelect">Выберите секцию:</label>
                <select id="sectionSelect">
                    <!-- Опции будут заполнены JavaScript -->
                </select>
            </div>
            
            <div class="control-group">
                <label>Размеры помещения (см):</label>
                <div class="dimensions-input">
                    <input type="number" id="roomWidth" placeholder="Ширина" min="10" value="300">
                    <input type="number" id="roomLength" placeholder="Длина" min="10" value="400">
                </div>
            </div>
        </div>

        <div class="canvas-container">
            <canvas id="roomCanvas" width="800" height="600"></canvas>
            <div class="section-info">
                <div>Масштаб: <span id="scaleInfo">1:10</span></div>
                <div>Размер помещения: <span id="sizeInfo">300×400 см</span></div>
            </div>
        </div>

        <div class="results">
            <div class="result-card">
                <div class="result-value" id="totalSections">0</div>
                <div class="result-label">Всего секций</div>
            </div>
            <div class="result-card">
                <div class="result-value" id="totalPower">0 Вт</div>
                <div class="result-label">Общая мощность</div>
            </div>
            <div class="result-card">
                <div class="result-value" id="powerPerM2">0 Вт/м²</div>
                <div class="result-label">Мощность на м²</div>
            </div>
            <div class="result-card">
                <div class="result-value" id="coverage">0%</div>
                <div class="result-label">Покрытие площади</div>
            </div>
        </div>
    </div>

    <script>
        const models = [
            {name: 'ТКС-01', power: 230, powerM2: 460, area: 0.5, width: 1, length: 0.5},
            {name: 'ТКС-02', power: 180, powerM2: 360, area: 0.5, width: 1, length: 0.5},
            {name: 'ТКС-03', power: 180, powerM2: 250, area: 0.72, width: 1, length: 0.72},
            {name: 'ТКС-04', power: 160, powerM2: 213, area: 0.75, width: 1, length: 0.75},
            {name: 'ТКС-05', power: 140, powerM2: 165, area: 0.85, width: 1, length: 0.85},
            {name: 'ТКС-06', power: 140, powerM2: 140, area: 1, width: 1, length: 1},
            {name: 'ТКС-07', power: 100, powerM2: 71, area: 1.4, width: 1, length: 1.4},
            {name: 'ТКС-08', power: 180, powerM2: 257, area: 0.7, width: 0.7, length: 1},
            {name: 'ТКС-09', power: 150, powerM2: 214, area: 0.7, width: 0.7, length: 1},
            {name: 'ТКС-10', power: 150, powerM2: 185, area: 0.81, width: 0.7, length: 1.15},
            {name: 'ТКС-11', power: 145, powerM2: 188, area: 0.77, width: 0.7, length: 1.1},
            {name: 'ТКС-12', power: 140, powerM2: 200, area: 0.7, width: 0.7, length: 1},
            {name: 'ТКС-13', power: 140, powerM2: 154, area: 0.91, width: 0.7, length: 1.3},
            {name: 'ТКС-14', power: 120, powerM2: 143, area: 0.84, width: 0.7, length: 1.2}
        ];

        class SectionCalculator {
            constructor() {
                this.canvas = document.getElementById('roomCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.currentSection = models[0];
                this.roomWidth = 300; // см
                this.roomLength = 400; // см
                this.scale = 10; // пикселей на см
                this.sections = [];
                
                this.initializeControls();
                this.calculateLayout();
                this.draw();
            }

            initializeControls() {
                const sectionSelect = document.getElementById('sectionSelect');
                models.forEach(model => {
                    const option = document.createElement('option');
                    option.value = model.name;
                    option.textContent = `${model.name} (${model.width}×${model.length}м, ${model.power}Вт)`;
                    sectionSelect.appendChild(option);
                });

                sectionSelect.addEventListener('change', (e) => {
                    this.currentSection = models.find(m => m.name === e.target.value);
                    this.calculateLayout();
                    this.draw();
                });

                const widthInput = document.getElementById('roomWidth');
                const lengthInput = document.getElementById('roomLength');

                widthInput.addEventListener('input', (e) => {
                    this.roomWidth = parseInt(e.target.value) || 10;
                    this.updateSizeInfo();
                    this.calculateLayout();
                    this.draw();
                });

                lengthInput.addEventListener('input', (e) => {
                    this.roomLength = parseInt(e.target.value) || 10;
                    this.updateSizeInfo();
                    this.calculateLayout();
                    this.draw();
                });

                this.updateSizeInfo();
            }

            updateSizeInfo() {
                document.getElementById('sizeInfo').textContent = 
                    `${this.roomWidth}×${this.roomLength} см`;
            }

            calculateLayout() {
                this.sections = [];
                const roomWidthM = this.roomWidth / 100;
                const roomLengthM = this.roomLength / 100;
                
                const section = this.currentSection;
                const sectionWidth = section.width;
                const sectionLength = section.length;
                
                // Пробуем оба варианта ориентации
                const orientations = [
                    { width: sectionWidth, length: sectionLength },
                    { width: sectionLength, length: sectionWidth }
                ];

                let bestLayout = null;
                let maxSections = 0;

                for (const orientation of orientations) {
                    const cols = Math.floor(roomWidthM / orientation.width);
                    const rows = Math.floor(roomLengthM / orientation.length);
                    const total = cols * rows;

                    if (total > maxSections) {
                        maxSections = total;
                        bestLayout = { orientation, cols, rows };
                    }
                }

                if (bestLayout) {
                    const { orientation, cols, rows } = bestLayout;
                    for (let row = 0; row < rows; row++) {
                        for (let col = 0; col < cols; col++) {
                            this.sections.push({
                                x: col * orientation.width * 100, // в см
                                y: row * orientation.length * 100, // в см
                                width: orientation.width * 100,
                                length: orientation.length * 100,
                                orientation: orientation.width === section.width ? 'horizontal' : 'vertical'
                            });
                        }
                    }
                }

                this.updateResults();
            }

            updateResults() {
                const totalSections = this.sections.length;
                const totalPower = totalSections * this.currentSection.power;
                const roomArea = (this.roomWidth / 100) * (this.roomLength / 100);
                const sectionsArea = totalSections * this.currentSection.area;
                const coverage = roomArea > 0 ? (sectionsArea / roomArea * 100).toFixed(1) : 0;
                const powerPerM2 = roomArea > 0 ? (totalPower / roomArea).toFixed(0) : 0;

                document.getElementById('totalSections').textContent = totalSections;
                document.getElementById('totalPower').textContent = `${totalPower} Вт`;
                document.getElementById('powerPerM2').textContent = `${powerPerM2} Вт/м²`;
                document.getElementById('coverage').textContent = `${coverage}%`;
            }

            draw() {
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                
                // Рассчитываем масштаб чтобы помещение влезало в канвас
                const maxWidth = this.canvas.width - 40;
                const maxHeight = this.canvas.height - 40;
                const scaleX = maxWidth / this.roomWidth;
                const scaleY = maxHeight / this.roomLength;
                this.scale = Math.min(scaleX, scaleY);
                
                const offsetX = (this.canvas.width - this.roomWidth * this.scale) / 2;
                const offsetY = (this.canvas.height - this.roomLength * this.scale) / 2;

                // Рисуем помещение
                this.ctx.strokeStyle = '#333';
                this.ctx.lineWidth = 2;
                this.ctx.strokeRect(offsetX, offsetY, this.roomWidth * this.scale, this.roomLength * this.scale);
                
                // Рисуем секции
                this.sections.forEach(section => {
                    const x = offsetX + section.x * this.scale;
                    const y = offsetY + section.y * this.scale;
                    const width = section.width * this.scale;
                    const height = section.length * this.scale;
                    
                    this.ctx.fillStyle = 'rgba(33, 150, 243, 0.2)';
                    this.ctx.strokeStyle = '#2196F3';
                    this.ctx.lineWidth = 1;
                    
                    this.ctx.fillRect(x, y, width, height);
                    this.ctx.strokeRect(x, y, width, height);
                    
                    // Подпись секции
                    this.ctx.fillStyle = '#1976D2';
                    this.ctx.font = '12px Arial';
                    this.ctx.textAlign = 'center';
                    this.ctx.fillText(
                        this.currentSection.name,
                        x + width / 2,
                        y + height / 2
                    );
                });

                // Обновляем информацию о масштабе
                document.getElementById('scaleInfo').textContent = 
                    `1:${Math.round(100 / this.scale)}`;
            }
        }

        // Инициализация калькулятора когда страница загрузится
        document.addEventListener('DOMContentLoaded', () => {
            new SectionCalculator();
        });
    </script>
</body>
</html>
